<?php
namespace App\Test\TestCase\Controller;

use App\Test\TestSuite\AuthIntegrationTestCase;

class CharactersControllerTest
	extends AuthIntegrationTestCase
{

	public $fixtures =
		[ 'app.players'
#		, 'app.believes', 'app.factions', 'app.groups', 'app.worlds'
#		, 'app.charactersConditions', 'app.conditions'
#		, 'app.charactersPowers', 'app.powers'
		, 'app.characters'
		, 'app.skills', 'app.charactersSkills'
	];

	public function testIndex()
	{
		$this->withoutAuth();
		$this->get('/characters');
		$this->assertResponseCode(403);

		$this->withAuthPlayer();
		$this->get('/characters');
		$this->assertResponseCode(200);

		$data = $this->jsonBody();
		$this->assertArrayKeyValue('class', 'List', $data);
		$this->assertArrayKeyValue('url', '/characters', $data);
		$this->assertArrayHasKey('list', $data);
		$this->assertCount(1, $data['list']);

		$this->withAuthReadonly();
		$this->get('/characters');
		$this->assertResponseCode(200);
		$this->assertCount(2, $this->jsonBody('list'));

		$this->withAuthReferee();
		$this->get('/characters');
		$this->assertResponseCode(200);
		$this->assertCount(2, $this->jsonBody('list'));

		$this->withAuthInfobalie();
		$this->get('/characters');
		$this->assertResponseCode(200);
		$this->assertCount(2, $this->jsonBody('list'));

		$this->withAuthSuper();
		$this->get('/characters');
		$this->assertResponseCode(200);
		$this->assertCount(2, $this->jsonBody('list'));
	}

	public function testIndexOfPlayer()
	{
		$this->withoutAuth();
		$this->get('/characters/1');
		$this->assertResponseCode(403);

		$this->withAuthPlayer();
		$this->get('/characters/1');
		$this->assertResponseCode(200);

		$data = $this->jsonBody();
		$this->assertCount(4, $data);
		$this->assertArrayKeyValue('class', 'List', $data);
		$this->assertArrayKeyValue('url', '/characters/1', $data);
		$this->assertArrayHasKey('parent', $data);
		$this->assertArrayHasKey('list', $data);

		$parent = $data['parent'];
		$this->assertCount(4, $parent);
		$this->assertArrayKeyValue('class', 'Player', $parent);
		$this->assertArrayKeyValue('url', '/players/1', $parent);
		$this->assertArrayKeyValue('plin', 1, $parent);
		$this->assertArrayKeyValue('full_name', 'Player One', $parent);

		$list = $data['list'];
		$this->assertCount(1, $data['list']);
	}

	public function testViewAsPlayer()
	{
		$this->withAuthPlayer();
		$this->get('/characters/1/2');
		$this->assertResponseCode(404);

		$this->withAuthPlayer();
		$this->get('/characters/2/1');
		$this->assertResponseCode(403);

		$this->withAuthPlayer();
		$this->get('/characters/1/1');
		$this->assertResponseCode(200);

		$data = $this->jsonBody();
		var_dump($data);
		$this->assertCount(23, $data);
		$this->assertArrayKeyValue('class', 'Character', $data);
		$this->assertArrayKeyValue('url', '/characters/1', $data);
		$this->assertArrayKeyValue('plin', '1', $data);
		$this->assertArrayKeyValue('chin', '1', $data);
		$this->assertArrayKeyValue('name', 'Sir Killalot', $data);
		$this->assertArrayKeyValue('xp', 15.0, $data);
		$this->assertArrayKeyValue('soulpath', '', $data);
		$this->assertArrayKeyValue('status', 'Active', $data);
		$this->assertArrayKeyValue('comments', NULL, $data);
#		$this->assertArrayKeyValue('first_name', 'Player', $data);
#		$this->assertArrayKeyValue('insertion', NULL, $data);
#		$this->assertArrayKeyValue('last_name', 'One', $data);
#		$this->assertArrayKeyValue('gender', NULL, $data);
#		$this->assertArrayKeyValue('date_of_birth', NULL, $data);
#		$this->assertArrayKeyValue('modified', NULL, $data);
#		$this->assertArrayKeyValue('modifier_id', NULL, $data);
#		$this->assertArrayKeyValue('full_name', 'Player One', $data);
#
#		$this->assertArrayHasKey('characters', $data);
#		$chars = $data['characters'];
#		$this->assertCount(3, $chars);
#		$this->assertArrayKeyValue('class', 'List', $chars);
#		$this->assertArrayKeyValue('url', '/players/1/characters', $chars);
#
#		$this->assertArrayHasKey('list', $chars);
#		$list = $chars['list'];
#		$this->assertCount(1, $list);
#
#		$this->withAuthPlayer();
#		$this->get('/players/2');
#		$this->assertResponseCode(403);
	}
}
